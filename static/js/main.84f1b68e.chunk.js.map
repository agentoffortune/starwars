{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","birth_year","gender","height","homeworld","mass","hair_color","eye_color","films","className","CardList","characters","cardArray","map","character","i","key","SearchBox","searchField","searchChange","type","defaultValue","onChange","Scroll","props","style","overflowY","textAlign","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","target","value","characterList","a","fetch","json","characterInfo","push","getCharacter","filterCharacters","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84f1b68e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({name, birth_year, gender, homeworld, height, mass, hair_color, eye_color, films}) => {\r\n\r\n        return (\r\n           <div className='card'>\r\n            <h2>{ name }</h2>\r\n            <p>\r\n                Born: { birth_year } <br />\r\n                \r\n                Gender: { gender } <br />\r\n                Height: { height } cm <br />\r\n                Weight: { mass } kg <br />\r\n                Hair Color: { hair_color } <br />\r\n                Eye Color: { eye_color } <br />\r\n                \r\n            </p>\r\n        </div> \r\n        )\r\n\r\n}\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n//import \"./CardList.css\";\r\n\r\nconst CardList = ({characters}) => {\r\n\r\n  const cardArray = characters.map((character, i) => {\r\n    \r\n    return (\r\n      <Card\r\n        key={i}\r\n        name={characters[i].name}\r\n        birth_year={characters[i].birth_year}\r\n        gender={characters[i].gender}\r\n        homeworld={characters[i].homeworld}\r\n      \r\n        height={characters[i].height}\r\n        mass={characters[i].mass}\r\n        hair_color={characters[i].hair_color}\r\n        eye_color={characters[i].eye_color}\r\n        films={characters[i].films}\r\n      />\r\n    );\r\n  });\r\n  return <div className='container'>{cardArray}</div>;\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./SearchBox.css\";\r\n\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <input\r\n      type=\"search\"\r\n      className='textbox'\r\n      name=\"searchBox\"\r\n      defaultValue=\"Search\"\r\n      onChange={searchChange}\r\n    />\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n       <div style={{overflowY: 'scroll', textAlign: 'center', height: '500px' }}>\r\n           {props.children}\r\n    </div> \r\n    )\r\n    \r\n}\r\nexport default Scroll;","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {hasError: false}\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops! Something went wrong!</h1>\r\n        } else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n//import \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      characters: [],\r\n      searchField: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let characterList = this.state.characters;\r\n    for (let i = 0; i < 16; i++) {\r\n      async function getCharacter() {\r\n        const character = await fetch(`https://swapi.co/api/people/${i + 1}/`);\r\n        const characterInfo = await character.json();\r\n\r\n        characterList.push(characterInfo);\r\n      }\r\n      getCharacter();\r\n    }\r\n\r\n    this.setState({ searchField: \"\" });\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n  render() {\r\n    const { characters, searchField } = this.state;\r\n\r\n    const filterCharacters = characters.filter(character => {\r\n      return character.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return !characters ? (\r\n      <h1>Loading, please wait...</h1>\r\n    ) : (\r\n      <div className=\"container\">\r\n        <h1>Star Wars Characters</h1>\r\n\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList characters={filterCharacters} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}